module Spec.Gimli.Test

open FStar.Mul
open Spec.Lib.IntTypes
open Spec.Lib.RawIntTypes
open Spec.Lib.IntSeq


//
// Test 1
//

let test1_input = List.Tot.map u8_from_UInt8 [
  0x54uy; 0x68uy; 0x65uy; 0x72uy; 0x65uy; 0x27uy; 0x73uy; 0x20uy;
  0x70uy; 0x6cuy; 0x65uy; 0x6euy; 0x74uy; 0x79uy; 0x20uy; 0x66uy;
  0x6fuy; 0x72uy; 0x20uy; 0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x62uy;
  0x6fuy; 0x74uy; 0x68uy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy; 0x75uy;
  0x73uy; 0x2cuy; 0x20uy; 0x6duy; 0x61uy; 0x79uy; 0x20uy; 0x74uy;
  0x68uy; 0x65uy; 0x20uy; 0x62uy; 0x65uy; 0x73uy; 0x74uy; 0x20uy;
  0x44uy; 0x77uy; 0x61uy; 0x72uy; 0x66uy; 0x20uy; 0x77uy; 0x69uy;
  0x6euy; 0x2euy
]

let test1_expected = List.Tot.map u8_from_UInt8 [
  0x4auy; 0xfbuy; 0x3fuy; 0xf7uy; 0x84uy; 0xc7uy; 0xaduy; 0x69uy;
  0x43uy; 0xd4uy; 0x9cuy; 0xf5uy; 0xdauy; 0x79uy; 0xfauy; 0xcfuy;
  0xa7uy; 0xc4uy; 0x43uy; 0x4euy; 0x1cuy; 0xe4uy; 0x4fuy; 0x5duy;
  0xd4uy; 0xb2uy; 0x8fuy; 0x91uy; 0xa8uy; 0x4duy; 0x22uy; 0xc8uy
]

//
// Test 2
//

let test2_input = List.Tot.map u8_from_UInt8 [
  0x49uy; 0x66uy; 0x20uy; 0x61uy; 0x6euy; 0x79uy; 0x6fuy; 0x6euy;
  0x65uy; 0x20uy; 0x77uy; 0x61uy; 0x73uy; 0x20uy; 0x74uy; 0x6fuy;
  0x20uy; 0x61uy; 0x73uy; 0x6buy; 0x20uy; 0x66uy; 0x6fuy; 0x72uy;
  0x20uy; 0x6duy; 0x79uy; 0x20uy; 0x6fuy; 0x70uy; 0x69uy; 0x6euy;
  0x69uy; 0x6fuy; 0x6euy; 0x2cuy; 0x20uy; 0x77uy; 0x68uy; 0x69uy;
  0x63uy; 0x68uy; 0x20uy; 0x49uy; 0x20uy; 0x6euy; 0x6fuy; 0x74uy;
  0x65uy; 0x20uy; 0x74uy; 0x68uy; 0x65uy; 0x79uy; 0x27uy; 0x72uy;
  0x65uy; 0x20uy; 0x6euy; 0x6fuy; 0x74uy; 0x2cuy; 0x20uy; 0x49uy;
  0x27uy; 0x64uy; 0x20uy; 0x73uy; 0x61uy; 0x79uy; 0x20uy; 0x77uy;
  0x65uy; 0x20uy; 0x77uy; 0x65uy; 0x72uy; 0x65uy; 0x20uy; 0x74uy;
  0x61uy; 0x6buy; 0x69uy; 0x6euy; 0x67uy; 0x20uy; 0x74uy; 0x68uy;
  0x65uy; 0x20uy; 0x6cuy; 0x6fuy; 0x6euy; 0x67uy; 0x20uy; 0x77uy;
  0x61uy; 0x79uy; 0x20uy; 0x61uy; 0x72uy; 0x6fuy; 0x75uy; 0x6euy;
  0x64uy; 0x2euy
]

let test2_expected = List.Tot.map u8_from_UInt8 [
  0xbauy; 0x82uy; 0xa1uy; 0x6auy; 0x7buy; 0x22uy; 0x4cuy; 0x15uy;
  0xbeuy; 0xd8uy; 0xe8uy; 0xbduy; 0xc8uy; 0x89uy; 0x03uy; 0xa4uy;
  0x00uy; 0x6buy; 0xc7uy; 0xbeuy; 0xdauy; 0x78uy; 0x29uy; 0x7duy;
  0x96uy; 0x02uy; 0x92uy; 0x03uy; 0xefuy; 0x08uy; 0xe0uy; 0x7cuy
]

//
// Test 3
//

let test3_input = List.Tot.map u8_from_UInt8 [
  0x53uy; 0x70uy; 0x65uy; 0x61uy; 0x6buy; 0x20uy; 0x77uy; 0x6fuy;
  0x72uy; 0x64uy; 0x73uy; 0x20uy; 0x77uy; 0x65uy; 0x20uy; 0x63uy;
  0x61uy; 0x6euy; 0x20uy; 0x61uy; 0x6cuy; 0x6cuy; 0x20uy; 0x75uy;
  0x6euy; 0x64uy; 0x65uy; 0x72uy; 0x73uy; 0x74uy; 0x61uy; 0x6euy;
  0x64uy; 0x21uy
]

let test3_expected = List.Tot.map u8_from_UInt8 [
  0x8duy; 0xd4uy; 0xd1uy; 0x32uy; 0x05uy; 0x9buy; 0x72uy; 0xf8uy;
  0xe8uy; 0x49uy; 0x3fuy; 0x9auy; 0xfbuy; 0x86uy; 0xc6uy; 0xd8uy;
  0x62uy; 0x63uy; 0xe7uy; 0x43uy; 0x9fuy; 0xc6uy; 0x4cuy; 0xbbuy;
  0x36uy; 0x1fuy; 0xcbuy; 0xccuy; 0xf8uy; 0xb0uy; 0x12uy; 0x67uy
]

//
// Test 4
//

let test4_input = List.Tot.map u8_from_UInt8 [
  0x49uy; 0x74uy; 0x27uy; 0x73uy; 0x20uy; 0x74uy; 0x72uy; 0x75uy;
  0x65uy; 0x20uy; 0x79uy; 0x6fuy; 0x75uy; 0x20uy; 0x64uy; 0x6fuy;
  0x6euy; 0x27uy; 0x74uy; 0x20uy; 0x73uy; 0x65uy; 0x65uy; 0x20uy;
  0x6duy; 0x61uy; 0x6euy; 0x79uy; 0x20uy; 0x44uy; 0x77uy; 0x61uy;
  0x72uy; 0x66uy; 0x2duy; 0x77uy; 0x6fuy; 0x6duy; 0x65uy; 0x6euy;
  0x2euy; 0x20uy; 0x41uy; 0x6euy; 0x64uy; 0x20uy; 0x69uy; 0x6euy;
  0x20uy; 0x66uy; 0x61uy; 0x63uy; 0x74uy; 0x2cuy; 0x20uy; 0x74uy;
  0x68uy; 0x65uy; 0x79uy; 0x20uy; 0x61uy; 0x72uy; 0x65uy; 0x20uy;
  0x73uy; 0x6fuy; 0x20uy; 0x61uy; 0x6cuy; 0x69uy; 0x6buy; 0x65uy;
  0x20uy; 0x69uy; 0x6euy; 0x20uy; 0x76uy; 0x6fuy; 0x69uy; 0x63uy;
  0x65uy; 0x20uy; 0x61uy; 0x6euy; 0x64uy; 0x20uy; 0x61uy; 0x70uy;
  0x70uy; 0x65uy; 0x61uy; 0x72uy; 0x61uy; 0x6euy; 0x63uy; 0x65uy;
  0x2cuy; 0x20uy; 0x74uy; 0x68uy; 0x61uy; 0x74uy; 0x20uy; 0x74uy;
  0x68uy; 0x65uy; 0x79uy; 0x20uy; 0x61uy; 0x72uy; 0x65uy; 0x20uy;
  0x6fuy; 0x66uy; 0x74uy; 0x65uy; 0x6euy; 0x20uy; 0x6duy; 0x69uy;
  0x73uy; 0x74uy; 0x61uy; 0x6buy; 0x65uy; 0x6euy; 0x20uy; 0x66uy;
  0x6fuy; 0x72uy; 0x20uy; 0x44uy; 0x77uy; 0x61uy; 0x72uy; 0x66uy;
  0x2duy; 0x6duy; 0x65uy; 0x6euy; 0x2euy; 0x20uy; 0x41uy; 0x6euy;
  0x64uy; 0x20uy; 0x74uy; 0x68uy; 0x69uy; 0x73uy; 0x20uy; 0x69uy;
  0x6euy; 0x20uy; 0x74uy; 0x75uy; 0x72uy; 0x6euy; 0x20uy; 0x68uy;
  0x61uy; 0x73uy; 0x20uy; 0x67uy; 0x69uy; 0x76uy; 0x65uy; 0x6euy;
  0x20uy; 0x72uy; 0x69uy; 0x73uy; 0x65uy; 0x20uy; 0x74uy; 0x6fuy;
  0x20uy; 0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x62uy; 0x65uy; 0x6cuy;
  0x69uy; 0x65uy; 0x66uy; 0x20uy; 0x74uy; 0x68uy; 0x61uy; 0x74uy;
  0x20uy; 0x74uy; 0x68uy; 0x65uy; 0x72uy; 0x65uy; 0x20uy; 0x61uy;
  0x72uy; 0x65uy; 0x20uy; 0x6euy; 0x6fuy; 0x20uy; 0x44uy; 0x77uy;
  0x61uy; 0x72uy; 0x66uy; 0x2duy; 0x77uy; 0x6fuy; 0x6duy; 0x65uy;
  0x6euy; 0x2cuy; 0x20uy; 0x61uy; 0x6euy; 0x64uy; 0x20uy; 0x74uy;
  0x68uy; 0x61uy; 0x74uy; 0x20uy; 0x44uy; 0x77uy; 0x61uy; 0x72uy;
  0x76uy; 0x65uy; 0x73uy; 0x20uy; 0x6auy; 0x75uy; 0x73uy; 0x74uy;
  0x20uy; 0x73uy; 0x70uy; 0x72uy; 0x69uy; 0x6euy; 0x67uy; 0x20uy;
  0x6fuy; 0x75uy; 0x74uy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy; 0x68uy;
  0x6fuy; 0x6cuy; 0x65uy; 0x73uy; 0x20uy; 0x69uy; 0x6euy; 0x20uy;
  0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x67uy; 0x72uy; 0x6fuy; 0x75uy;
  0x6euy; 0x64uy; 0x21uy; 0x20uy; 0x57uy; 0x68uy; 0x69uy; 0x63uy;
  0x68uy; 0x20uy; 0x69uy; 0x73uy; 0x2cuy; 0x20uy; 0x6fuy; 0x66uy;
  0x20uy; 0x63uy; 0x6fuy; 0x75uy; 0x72uy; 0x73uy; 0x65uy; 0x2cuy;
  0x20uy; 0x72uy; 0x69uy; 0x64uy; 0x69uy; 0x63uy; 0x75uy; 0x6cuy;
  0x6fuy; 0x75uy; 0x73uy; 0x2euy
]

let test4_expected = List.Tot.map u8_from_UInt8 [
  0x88uy; 0x87uy; 0xa5uy; 0x36uy; 0x7duy; 0x96uy; 0x1duy; 0x67uy;
  0x34uy; 0xeeuy; 0x1auy; 0x0duy; 0x4auy; 0xeeuy; 0x09uy; 0xcauy;
  0xcauy; 0x7fuy; 0xd6uy; 0xb6uy; 0x06uy; 0x09uy; 0x6fuy; 0xf6uy;
  0x9duy; 0x8cuy; 0xe7uy; 0xb9uy; 0xa4uy; 0x96uy; 0xcduy; 0x2fuy
]

//
// Test 5
//

let test5_input = List.Tot.map u8_from_UInt8 [

]

let test5_expected = List.Tot.map u8_from_UInt8 [
  0xb0uy; 0x63uy; 0x4buy; 0x2cuy; 0x0buy; 0x08uy; 0x2auy; 0xeduy;
  0xc5uy; 0xc0uy; 0xa2uy; 0xfeuy; 0x4euy; 0xe3uy; 0xaduy; 0xcfuy;
  0xc9uy; 0x89uy; 0xecuy; 0x05uy; 0xdeuy; 0x6fuy; 0x00uy; 0xaduy;
  0xdbuy; 0x04uy; 0xb3uy; 0xaauy; 0xacuy; 0x27uy; 0x1fuy; 0x67uy
]

//
// Main
//

let test () =

  IO.print_string "\nTEST 1\n";
  let test1_input_len : size_nat = List.Tot.length test1_input in
  let test1_input : lbytes test1_input_len = createL test1_input in

  let test1_expected : lbytes 32 = createL test1_expected in
  let test1_result : lbytes 32 = Spec.Gimli.hash 32 test1_input_len test1_input in
  let result1 = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b) test1_expected test1_result in

  IO.print_string "\nExpected Gimli : ";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (as_list test1_expected);
  IO.print_string "\nComputed Gimli : ";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (as_list test1_result);

  if result1 then IO.print_string "\nGimli Test1: Success!\n"
  else IO.print_string "\nGimli Test1: Failure :(\n"
